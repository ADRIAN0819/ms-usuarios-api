#org: ivanrodriguezperez
org: adrianurbinamendoza
service: MS1-api-usuarios

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 30
  environment:
    JWT_SECRET: clave_de_prueba
    TABLE_NAME: ${sls:stage}-t_MS1_usuarios
    TOKENS_TABLE: ${sls:stage}-t_MS1_tokens_acceso
  iam:
    #role: arn:aws:iam::748213590633:role/LabRole
    role: arn:aws:iam::254780740814:role/LabRole

functions:
  crearUsuario:
    handler: lambdas/Lambda_CrearUsuario.lambda_handler
    events:
      - http:
          path: usuarios/crear
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy
      - http:
          path: usuarios/crear
          method: options
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy

  loginUsuario:
    handler: lambdas/Lambda_LoginUsuario.lambda_handler
    events:
      - http:
          path: usuarios/login
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy
      - http:
          path: usuarios/login
          method: options
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy

  validarToken:
    handler: lambdas/Lambda_ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: usuarios/validar
          method: post
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy
      - http:
          path: usuarios/validar
          method: options
          cors:
            origins:
              - "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - POST
              - OPTIONS
          integration: lambda-proxy

resources:
  Resources:
    UsuariosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_MS1_tokens_acceso
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
